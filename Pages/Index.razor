@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using BlazingPizza.Services
@inject OrderState OrderState

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <a class="nav-tab active" href="">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </a>
</div>

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@( () => OrderState.ShowPizzaConfigDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                            @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        // Order has Elements
        <div class="order-contents">
            <h2>Your Order</h2>

            @foreach (var configPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configPizza.Size)" @configPizza.Special.Name</div>
                    <div class="item-price">@configPizza.GetFormattedTotalPrice()</div>
                    <a @onclick="@( () => OrderState.RemoveConfigPizza(configPizza))" class="delete-item">üôÖ</a>
                </div>
            }
        </div>
    }
    else
    {
        // Order is Empty
        <div class="empty-cart">Select a pizza<br>before completing<br>your order.</div>
    }

    @* Summary, takes two forms, "order-total" if 'order' has any elements and "order-total hidden" on empty *@
    <div class="@(order.Pizzas.Any() ? "order-total" : "order-total hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order üçï
        </a>
    </div>
</div>


@if (OrderState.ShowingConfigDialog)
{
    <ConfigPizzaDialog 
     Pizza="OrderState.ConfigPizza"
     OnCancel="OrderState.ClosePizzaConfigDialog"
     OnConfirm="OrderState.ConfirmPizzaConfigDialog" />
}

@code {
    private List<PizzaSpecial> specials = new();
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        // Get list <PizzaSpecial> as JSON from the URI / specials, convert data with GetFromJsonAsync
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }
}